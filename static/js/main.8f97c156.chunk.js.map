{"version":3,"sources":["assets/images/user.png","api/api.ts","redux/dialogs-reducer.ts","components/Music/Music.module.css","components/News/News.module.css","components/Settings/Settings.module.css","components/Users/Users.module.css","assets/images/preloader.svg","components/Navbar/Navbar.module.css","components/common/FormsControl/FormsControl.tsx","components/Music/Music.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Settings/Settings.tsx","api/users-api.ts","helpers/objects-helpers.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.jsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.jsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/hoc/withSuspense.js","App.js","serviceWorker.js","index.js","components/common/FormsControl/FormsControl.module.css","components/common/preloader/Preloader.tsx","helpers/validators.ts","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","api/profile-api.ts","redux/profile-reducer.ts"],"names":["module","exports","ResultCodesEnum","instance","axios","create","withCredentials","baseURL","headers","initialState","dialogs","id","name","messages","message","actions","addMessageActionCreator","newMessageText","type","dialogsReducer","state","action","newMessage","FormControl","meta","touched","error","children","showError","className","s","formControl","Textarea","props","input","restprops","Input","createField","placeholder","validators","component","text","validate","Music","header","Navbar","nav","item","to","activeClassName","activeLink","News","Settings","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","users","totalUsersCount","isFetching","followingInProgress","count","_followUnfollow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","onClick","p","cn","selectedPage","pageNumber","key","User","user","src","photos","small","userPhoto","alt","disabled","some","status","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","this","pageTitle","Preloader","Component","compose","connect","bind","page","totalCount","Header","isAuth","login","logout","loginBlock","authAPI","res","email","password","rememberMe","captcha","securityAPI","captchaUrl","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","HeaderContainer","React","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","undefined","formSummaryError","CaptchaIsRequired","length","stopSubmit","_error","formData","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","promise","alert","initializeApp","addEventListener","removeEventListener","exact","path","render","AppContainer","withRouter","Promise","all","MainApp","basename","process","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","style","backgroundColor","preloader","value","maxLengthCreator","maxLength","profileAPI","put","photoFile","FormData","append","profile","posts","likes","newPostText","addPostActionCreator","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserProfile","getStatus","updateStatus","savePhoto","file","saveProfile","getState","Error","reject","newPost"],"mappings":"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","file":"static/js/main.8f97c156.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.f8a15e74.png\";","import axios from 'axios';\nimport { UserType } from '../types/types';\n\nexport const instance = axios.create({\n  withCredentials: true,\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n  headers: { 'API-KEY': '076b0337-058a-45c7-afb3-fa0f2a59e73c5' }\n});\n\nexport enum ResultCodesEnum {\n  Success = 0,\n  Error = 1,\n  CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n  items: Array<UserType>;\n  totalCount: number;\n  error: string | null;\n};\n\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n  data: D;\n  messages: Array<string>;\n  resultCode: RC;\n};\n","import { InferActionsType } from './redux-store';\n\ntype DialogType = { id: number; name: string };\ntype MessageType = { id: number; message: string };\n\nconst initialState = {\n  dialogs: [\n    { id: 1, name: 'Vlad' },\n    { id: 2, name: 'Dima' },\n    { id: 3, name: 'Stas' },\n    { id: 4, name: 'Zhora' },\n    { id: 5, name: 'Victor' }\n  ] as Array<DialogType>,\n  messages: [\n    { id: 1, message: 'Hi' },\n    { id: 2, message: 'How is your day?' },\n    { id: 3, message: 'Yo' },\n    { id: 4, message: '???' },\n    { id: 5, message: 'I love you' }\n  ] as Array<MessageType>\n};\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsType<typeof actions>;\n\nconst dialogsReducer = (\n  state = initialState,\n  action: ActionsType\n): InitialStateType => {\n  switch (action.type) {\n    case 'SN/DIALOGS/ADD_MESSAGE':\n      let newMessage = { id: 6, message: action.newMessageText };\n      return {\n        ...state,\n        messages: [...state.messages, newMessage]\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  addMessageActionCreator: (newMessageText: string) =>\n    ({\n      type: 'SN/DIALOGS/ADD_MESSAGE',\n      newMessageText\n    } as const)\n};\n\nexport default dialogsReducer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Music_header__1m9Ve\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"News_header__33OXI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Settings_header__3-lrQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2YUPA\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.a7340b83.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__x7xE2\",\"item\":\"Navbar_item__3JT36\",\"activeLink\":\"Navbar_activeLink__3Sl37\"};","import React, { FC } from 'react';\nimport s from './FormsControl.module.css';\nimport { Field, WrappedFieldProps, WrappedFieldMetaProps } from 'redux-form';\nimport { FieldValidatorType } from '../../../helpers/validators';\n\ntype FormControlPropsType = {\n  meta: WrappedFieldMetaProps;\n};\n\nconst FormControl: FC<FormControlPropsType> = ({\n  meta: { touched, error },\n  children\n}) => {\n  const showError = touched && error;\n  return (\n    <div className={s.formControl + ' ' + (showError ? s.error : '')}>\n      <div>{children}</div>\n      <div>{showError && <span>{error}</span>}</div>\n    </div>\n  );\n};\n\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\n  // const { input, meta, child, ...restprops } = props;\n  const { input, meta, ...restprops } = props;\n  return (\n    <FormControl {...props}>\n      <textarea {...input} {...restprops} />\n    </FormControl>\n  );\n};\n\nexport const Input: FC<WrappedFieldProps> = (props) => {\n  // const { input, meta, child, ...restprops } = props;\n  const { input, meta, ...restprops } = props;\n  return (\n    <FormControl {...props}>\n      <input {...input} {...restprops} />\n    </FormControl>\n  );\n};\n\nexport function createField<FormKeysType extends string>(\n  placeholder: string | undefined,\n  name: FormKeysType,\n  validators: Array<FieldValidatorType>,\n  component: FC<WrappedFieldProps>,\n  props = {},\n  text = ''\n) {\n  return (\n    <div>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n      {text}\n    </div>\n  );\n}\n","import React, { FC } from 'react';\nimport s from './Music.module.css';\n\ntype PropsType = {\n  props: null;\n};\n\nconst Music: FC<PropsType> = (props) => {\n  return (\n    <div>\n      <h1 className={s.header}>Music</h1>\n      <p>asdasdas</p>\n    </div>\n  );\n};\n\nexport default Music;\n","import React, { FC } from 'react';\nimport s from './Navbar.module.css';\nimport { NavLink } from 'react-router-dom';\n// import Friends from '../Friends/Friends';\n\ntype PropsType = {\n  props: null;\n};\n\nconst Navbar: FC<PropsType> = (props) => {\n  return (\n    <nav className={s.nav}>\n      <div className={s.item}>\n        <NavLink to='/profile' activeClassName={s.activeLink}>\n          Profile\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to='/dialogs' activeClassName={s.activeLink}>\n          Messages\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to='/users' activeClassName={s.activeLink}>\n          Users\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to='/news' activeClassName={s.activeLink}>\n          News\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to='/music' activeClassName={s.activeLink}>\n          Music\n        </NavLink>\n      </div>\n      <div className={s.item}>\n        <NavLink to='/settings' activeClassName={s.activeLink}>\n          Settings\n        </NavLink>\n      </div>\n      {/* <Friends friends={props.store.sidebar.friends} /> */}\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { FC } from 'react';\nimport s from './News.module.css';\n\ntype PropsType = {\n  props: null;\n};\nconst News: FC<PropsType> = (props) => {\n  return (\n    <div>\n      <h1 className={s.header}>News</h1>\n      <p>Welcome to the most recent news page</p>\n    </div>\n  );\n};\n\nexport default News;\n","import React, { FC } from 'react';\nimport s from './Settings.module.css';\n\ntype PropsType = {\n  props: null;\n};\nconst Settings: FC<PropsType> = (props) => {\n  return (\n    <div>\n      <h1 className={s.header}>Settings</h1>\n      <p>This page is supposed to let user to change some settings</p>\n    </div>\n  );\n};\n\nexport default Settings;\n","import { instance, GetItemsType, APIResponseType } from './api';\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage = 1, pageSize = 10) {\r\n    return instance\r\n      .get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then((response) => response.data);\r\n  },\r\n  follow(userId: number) {\r\n    return instance\r\n      .post<APIResponseType>(`follow/${userId}`, {})\r\n      .then((response) => response.data);\r\n  },\r\n  unfollow(userId: number) {\r\n    return instance\r\n      .delete(`follow/${userId}`, {})\r\n      .then((response) => response.data) as Promise<APIResponseType>;\r\n  }\r\n};\r\n","export const updateObjectInArray = (\n  items: any,\n  itemId: any,\n  objPropName: any,\n  newObjProps: any\n) => {\n  return items.map((u: any) => {\n    if (u[objPropName] === itemId) {\n      return { ...u, ...newObjProps };\n    }\n    return u;\n  });\n};\n","import { usersAPI } from '../api/users-api';\nimport { updateObjectInArray } from '../helpers/objects-helpers';\nimport { UserType } from '../types/types';\nimport { InferActionsType, BaseThunkType } from './redux-store';\nimport { Dispatch } from 'redux';\n\nconst initialState = {\n  users: [] as Array<UserType>,\n  pageSize: 10,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [] as Array<number> // array of users id\n};\nexport type InitialStateType = typeof initialState;\n\nconst usersReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SN/USERS/FOLLOW':\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: true\n        })\n      };\n    case 'SN/USERS/UNFOLLOW':\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: false\n        })\n      };\n    case 'SN/USERS/SET_USERS':\n      return { ...state, users: action.users };\n    case 'SN/USERS/SET_CURRENT_PAGE':\n      return { ...state, currentPage: action.currentPage };\n    case 'SN/USERS/SET_TOTAL_USERS_COUNT':\n      return { ...state, totalUsersCount: action.count };\n    case 'SN/USERS/TOGGLE_IS_FETCHING':\n      return { ...state, isFetching: action.isFetching };\n    case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\n      return {\n        ...state,\n        followingInProgress: action.isFetching\n          ? [...state.followingInProgress, action.userId]\n          : state.followingInProgress.filter((id) => id !== action.userId)\n      };\n    default:\n      return state;\n  }\n};\n\ntype ActionsTypes = InferActionsType<typeof actions>;\n\nexport const actions = {\n  followSuccess: (userId: number) =>\n    ({ type: 'SN/USERS/FOLLOW', userId } as const),\n  unfollowSuccess: (userId: number) =>\n    ({ type: 'SN/USERS/UNFOLLOW', userId } as const),\n  setUsers: (users: Array<UserType>) =>\n    ({ type: 'SN/USERS/SET_USERS', users } as const),\n  setCurrentPage: (currentPage: number) =>\n    ({\n      type: 'SN/USERS/SET_CURRENT_PAGE',\n      currentPage\n    } as const),\n  setTotalUsersCount: (totalUsersCount: number) =>\n    ({\n      type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n      count: totalUsersCount\n    } as const),\n  toggleIsFetching: (isFetching: boolean) =>\n    ({\n      type: 'SN/USERS/TOGGLE_IS_FETCHING',\n      isFetching\n    } as const),\n  toggleFollowingProgress: (isFetching: boolean, userId: number) =>\n    ({\n      type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n      isFetching,\n      userId\n    } as const)\n};\n\ntype ThunkType = BaseThunkType<ActionsTypes>;\n\nexport const requestUsers = (\n  page: number,\n  pageSize: number\n): ThunkType => async (dispatch) => {\n  dispatch(actions.toggleIsFetching(true));\n  dispatch(actions.setCurrentPage(page));\n\n  const data = await usersAPI.getUsers(page, pageSize);\n  dispatch(actions.toggleIsFetching(false));\n  dispatch(actions.setUsers(data.items));\n  dispatch(actions.setTotalUsersCount(data.totalCount));\n};\n\nconst _followUnfollow = async (\n  dispatch: Dispatch<ActionsTypes>,\n  userId: number,\n  apiMethod: any,\n  actionCreator: (userId: number) => ActionsTypes\n) => {\n  dispatch(actions.toggleFollowingProgress(true, userId));\n  const response = await apiMethod(userId);\n  if (response.data.resultCode === 0) dispatch(actionCreator(userId));\n  dispatch(actions.toggleFollowingProgress(false, userId));\n};\n\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\n  _followUnfollow(\n    dispatch,\n    userId,\n    usersAPI.follow.bind(usersAPI),\n    actions.followSuccess\n  );\n};\n\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\n  _followUnfollow(\n    dispatch,\n    userId,\n    usersAPI.unfollow.bind(usersAPI),\n    actions.unfollowSuccess\n  );\n};\n\nexport default usersReducer;\n","import React, { useState, FC } from 'react';\nimport s from './Paginator.module.css';\nimport cn from 'classnames';\n\ntype PropsType = {\n  totalItemsCount: number;\n  pageSize: number;\n  currentPage: number;\n  onPageChanged: (pageNumber: number) => void;\n  portionSize?: number;\n};\n\nconst Paginator: FC<PropsType> = ({\n  totalItemsCount,\n  pageSize,\n  currentPage,\n  onPageChanged,\n  portionSize = 10\n}) => {\n  let pagesCount = Math.ceil(totalItemsCount / pageSize);\n  let pages: Array<number> = [];\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n\n  return (\n    <div className={s.paginator}>\n      {portionNumber > 1 && (\n        <button\n          onClick={() => {\n            setPortionNumber(portionNumber - 1);\n          }}\n        >\n          Prev\n        </button>\n      )}\n      {pages\n        .filter(\n          (p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber\n        )\n        .map((p) => {\n          return (\n            <span\n              className={cn(\n                { [s.selectedPage]: currentPage === p },\n                s.pageNumber\n              )}\n              key={p}\n              onClick={() => {\n                onPageChanged(p);\n              }}\n            >\n              {p}\n            </span>\n          );\n        })}\n      {portionCount > portionNumber && (\n        <button\n          onClick={() => {\n            setPortionNumber(portionNumber + 1);\n          }}\n        >\n          Next\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Paginator;\n","import React, { FC } from 'react';\nimport userPhoto from './../../assets/images/user.png';\nimport s from './Users.module.css';\nimport { NavLink } from 'react-router-dom';\nimport { UserType } from '../../types/types';\n\ntype PropsType = {\n  user: UserType;\n  followingInProgress: Array<number>;\n  follow: (userId: number) => void;\n  unfollow: (userId: number) => void;\n};\n\nconst User: FC<PropsType> = ({\n  user,\n  followingInProgress,\n  unfollow,\n  follow\n}) => {\n  return (\n    <div>\n      <span>\n        <div>\n          <NavLink to={'/profile/' + user.id}>\n            <img\n              src={user.photos.small != null ? user.photos.small : userPhoto}\n              className={s.userPhoto}\n              alt=''\n            />\n          </NavLink>\n        </div>\n        <div>\n          {user.followed ? (\n            <button\n              disabled={followingInProgress.some((id) => id === user.id)}\n              onClick={() => unfollow(user.id)}\n            >\n              Unfollow\n            </button>\n          ) : (\n            <button\n              disabled={followingInProgress.some((id) => id === user.id)}\n              onClick={() => follow(user.id)}\n            >\n              Follow\n            </button>\n          )}\n        </div>\n      </span>\n      <span>\n        <span>\n          <div>{user.name}</div>\n          <div>{user.status}</div>\n        </span>\n        <span>\n          <div>{'u.location.country'}</div>\n          <div>{'u.location.city'}</div>\n        </span>\n      </span>\n    </div>\n  );\n};\n\nexport default User;\n","import React, { FC } from 'react';\nimport Paginator from '../common/Paginator/Paginator';\nimport User from './User';\nimport { UserType } from '../../types/types';\n\ntype PropsType = {\n  currentPage: number;\n  totalUsersCount: number;\n  pageSize: number;\n  onPageChanged: (pageNumber: number) => void;\n  users: Array<UserType>;\n  followingInProgress: Array<number>;\n  follow: (userId: number) => void;\n  unfollow: (userId: number) => void;\n};\n\nconst Users: FC<PropsType> = ({\n  currentPage,\n  totalUsersCount,\n  pageSize,\n  onPageChanged,\n  users,\n  ...props\n}) => {\n  return (\n    <div>\n      <Paginator\n        currentPage={currentPage}\n        onPageChanged={onPageChanged}\n        totalItemsCount={totalUsersCount}\n        pageSize={pageSize}\n      />\n      {users.map((u) => (\n        <User\n          user={u}\n          followingInProgress={props.followingInProgress}\n          unfollow={props.unfollow}\n          follow={props.follow}\n          key={u.id}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Users;\n","import { createSelector } from 'reselect';\nimport { AppStateType } from './redux-store';\n\nconst getUsersSelector = (state: AppStateType) => {\n  return state.usersPage.users;\n};\n\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n  return users.filter((u) => true);\n});\nexport const getPageSize = (state: AppStateType) => {\n  return state.usersPage.pageSize;\n};\nexport const getTotalUsersCount = (state: AppStateType) => {\n  return state.usersPage.totalUsersCount;\n};\nexport const getCurrentPage = (state: AppStateType) => {\n  return state.usersPage.currentPage;\n};\nexport const getIsFetching = (state: AppStateType) => {\n  return state.usersPage.isFetching;\n};\nexport const getFollowingInProgress = (state: AppStateType) => {\n  return state.usersPage.followingInProgress;\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { follow, unfollow, requestUsers } from '../../redux/users-reducer';\nimport Users from './Users';\nimport Preloader from '../common/preloader/Preloader';\nimport { compose } from 'redux';\nimport {\n  getPageSize,\n  getUsers,\n  getTotalUsersCount,\n  getCurrentPage,\n  getIsFetching,\n  getFollowingInProgress\n} from '../../redux/users-selectors';\nimport { UserType } from '../../types/types';\nimport { AppStateType } from '../../redux/redux-store';\n\ntype MapStatePropsType = {\n  currentPage: number;\n  pageSize: number;\n  isFetching: boolean;\n  totalUsersCount: number;\n  users: Array<UserType>;\n  followingInProgress: Array<number>;\n};\n\ntype MapDispatchPropsType = {\n  requestUsers: (currentPage: number, pageSize: number) => void;\n  follow: (userId: number) => void;\n  unfollow: (userId: number) => void;\n};\n\ntype OwnPropsType = {\n  pageTitle: string;\n};\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType;\n\nclass UsersContainer extends Component<PropsType> {\n  componentDidMount() {\n    const { currentPage, pageSize } = this.props;\n    this.props.requestUsers(currentPage, pageSize);\n  }\n\n  onPageChanged = (pageNumber: number) => {\n    const { pageSize } = this.props;\n    this.props.requestUsers(pageNumber, pageSize);\n  };\n\n  render() {\n    return (\n      <>\n        <h2>{this.props.pageTitle}</h2>\n        {this.props.isFetching ? <Preloader /> : null}\n        <Users\n          totalUsersCount={this.props.totalUsersCount}\n          pageSize={this.props.pageSize}\n          currentPage={this.props.currentPage}\n          onPageChanged={this.onPageChanged}\n          users={this.props.users}\n          follow={this.props.follow}\n          unfollow={this.props.unfollow}\n          followingInProgress={this.props.followingInProgress}\n        />\n      </>\n    );\n  }\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n  users: getUsers(state),\n  pageSize: getPageSize(state),\n  totalUsersCount: getTotalUsersCount(state),\n  currentPage: getCurrentPage(state),\n  isFetching: getIsFetching(state),\n  followingInProgress: getFollowingInProgress(state)\n});\n\nexport default compose(\n  // TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\n    mapStateToProps,\n    {\n      follow,\n      unfollow,\n      requestUsers\n    }\n  )\n)(UsersContainer);\n","import React from 'react';\nimport s from './Header.module.css';\nimport { NavLink } from 'react-router-dom';\n\nconst Header = ({ isAuth, login, logout }) => {\n  return (\n    <header className={s.header}>\n      <div>\n        <h1>\n          Not<span>Facebook</span>\n        </h1>\n      </div>\n      <div className={s.loginBlock}>\n        {isAuth ? (\n          <div>\n            {login} - <button onClick={logout}>Log Out</button>\n          </div>\n        ) : (\n          <NavLink to={'/login'}>Login</NavLink>\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import { instance, APIResponseType } from './api';\r\n\r\ntype MeResponseDataType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\ntype LoginResponseType = {\r\n  userId: number;\r\n};\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance\r\n      .get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n      .then((res) => res.data);\r\n  },\r\n  login(\r\n    email: string,\r\n    password: string,\r\n    rememberMe = false,\r\n    captcha: null | string = null\r\n  ) {\r\n    return instance\r\n      .post<APIResponseType<LoginResponseType>>(`auth/login`, {\r\n        email,\r\n        password,\r\n        rememberMe,\r\n        captcha\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`);\r\n  }\r\n};\r\n","import { instance } from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string;\r\n};\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance\r\n      .get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n      .then((response) => response.data);\r\n  }\r\n};\r\n","import { BaseThunkType, InferActionsType } from './redux-store';\nimport { ResultCodesEnum } from '../api/api';\nimport { authAPI } from '../api/auth-api';\nimport { securityAPI } from '../api/security-api';\nimport { stopSubmit, FormAction } from 'redux-form';\n\nexport type initialStateType = typeof initialState;\nconst initialState = {\n  userId: null as number | null,\n  email: null as string | null,\n  login: null as string | null,\n  isAuth: false,\n  captchaUrl: null as string | null\n};\n\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;\n\nconst authReducer = (\n  state = initialState,\n  action: ActionsType\n): initialStateType => {\n  switch (action.type) {\n    case 'SN/auth/SET_USER_DATA':\n    case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\n\ntype ActionsType = InferActionsType<typeof actions>;\nexport const actions = {\n  getCaptchaUrlSuccess: (captchaUrl: string) =>\n    ({\n      type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS',\n      payload: { captchaUrl }\n    } as const),\n\n  setAuthUserData: (\n    userId: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: boolean\n  ) =>\n    ({\n      type: 'SN/auth/SET_USER_DATA',\n      payload: { userId, email, login, isAuth }\n    } as const)\n};\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n  const meData = await authAPI.me();\n  if (meData.resultCode === ResultCodesEnum.Success) {\n    const { id, email, login } = meData.data;\n    dispatch(actions.setAuthUserData(id, email, login, true));\n  }\n};\n\nexport const login = (\n  email: string,\n  password: string,\n  rememberMe: boolean,\n  captcha: string\n): ThunkType => async (dispatch) => {\n  const data = await authAPI.login(email, password, rememberMe, captcha);\n  if (data.resultCode === ResultCodesEnum.Success) {\n    dispatch(getAuthUserData());\n  } else {\n    if (data.resultCode === ResultCodesEnum.CaptchaIsRequired) {\n      dispatch(getCaptchaUrl());\n    }\n    const message = data.messages.length > 0 ? data.messages[0] : 'Some error';\n    dispatch(stopSubmit('login', { _error: message }));\n  }\n};\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n  const data = await securityAPI.getCaptchaUrl();\n  const captchaUrl = data.url;\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\n};\n\nexport const logout = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.logout();\n  if (response.data.resultCode === 0) {\n    dispatch(actions.setAuthUserData(null, null, null, false));\n  }\n};\n\nexport default authReducer;\n","import React from 'react';\nimport Header from './Header';\nimport { connect } from 'react-redux';\nimport { logout } from './../../redux/auth-reducer';\n\nclass HeaderContainer extends React.Component {\n  render() {\n    return <Header {...this.props} />;\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n  login: state.auth.login\n});\n\nexport default connect(mapStateToProps, { logout })(HeaderContainer);\n","import React, { FC } from 'react';\nimport { reduxForm, InjectedFormProps } from 'redux-form';\nimport { Input, createField } from '../common/FormsControl/FormsControl';\nimport { required } from '../../helpers/validators';\nimport { connect } from 'react-redux';\nimport { login } from '../../redux/auth-reducer';\nimport { Redirect } from 'react-router-dom';\nimport s from '../common/FormsControl/FormsControl.module.css';\nimport { AppStateType } from '../../redux/redux-store';\n\ntype LoginFormOwnProps = {\n  captchaUrl: string | null;\n};\n\nconst LoginForm: FC<\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\n> = ({ handleSubmit, error, captchaUrl }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      {createField<LoginFormValuesTypeKeys>(\n        'Email',\n        'email',\n        [required],\n        Input\n      )}\n      {createField<LoginFormValuesTypeKeys>(\n        'Password',\n        'password',\n        [required],\n        Input,\n        {\n          type: 'password'\n        }\n      )}\n      {createField<LoginFormValuesTypeKeys>(\n        undefined,\n        'rememberMe',\n        [],\n        Input,\n        { type: 'checkbox' },\n        'remember me'\n      )}\n      {captchaUrl && <img src={captchaUrl} alt='' />}\n      {captchaUrl && createField('Captcha', 'captcha', [required], Input)}\n      {error && <div className={s.formSummaryError}>{error}</div>}\n      <div>\n        <button>Login</button>\n      </div>\n    </form>\n  );\n};\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\n  form: 'login'\n})(LoginForm);\n\ntype MapStatePropsType = {\n  captchaUrl: string | null;\n  isAuth: boolean;\n};\n\ntype MapDispatchPropsType = {\n  login: (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: string\n  ) => void;\n};\n\nexport type LoginFormValuesType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha: string;\n};\n\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>;\n\nconst Login: FC<MapStatePropsType & MapDispatchPropsType> = ({\n  isAuth,\n  captchaUrl,\n  login\n}) => {\n  const onSubmit = (formData: LoginFormValuesType) => {\n    login(\n      formData.email,\n      formData.password,\n      formData.rememberMe,\n      formData.captcha\n    );\n  };\n\n  if (isAuth) {\n    return <Redirect to={'/profile'} />;\n  }\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n  isAuth: state.auth.isAuth,\n  captchaUrl: state.auth.captchaUrl\n});\n\nexport default connect(mapStateToProps, { login })(Login);\n","import { getAuthUserData } from './auth-reducer';\nimport { InferActionsType } from './redux-store';\n\nconst initialState = {\n  initialized: false\n};\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsType<typeof actions>;\n\nconst appReducer = (\n  state = initialState,\n  action: ActionsType\n): InitialStateType => {\n  switch (action.type) {\n    case 'INITIALIZED_SUCCESS':\n      return {\n        ...state,\n        initialized: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  initializedSuccess: () => ({ type: 'INITIALIZED_SUCCESS' } as const)\n};\n\nexport const initializeApp = () => (dispatch: any) => {\n  const promise = dispatch(getAuthUserData());\n\n  Promise.all([promise]).then(() => {\n    dispatch(actions.initializedSuccess());\n  });\n};\n\nexport default appReducer;\n","const initialState = {};\nexport type InitialStateType = typeof initialState;\n\nconst sidebarReducer = (\n  state = initialState,\n  action: any\n): InitialStateType => {\n  return state;\n};\n\nexport default sidebarReducer;\n","import {\n  combineReducers,\n  createStore,\n  compose,\n  applyMiddleware,\n  Action\n} from 'redux';\nimport profileReducer from './profile-reducer';\nimport dialogsReducer from './dialogs-reducer';\nimport sidebarReducer from './sidebar-reducer';\nimport usersReducer from './users-reducer';\nimport authReducer from './auth-reducer';\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form';\nimport appReducer from './app-reducer';\n\nconst rootReducer = combineReducers({\n  profilePage: profileReducer,\n  dialogsPage: dialogsReducer,\n  sidebar: sidebarReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  form: formReducer,\n  app: appReducer\n});\n\ntype RootReducerType = typeof rootReducer;\nexport type AppStateType = ReturnType<RootReducerType>;\n\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never;\nexport type InferActionsType<\n  T extends { [key: string]: (...args: any[]) => any }\n> = ReturnType<PropertiesTypes<T>>;\n\nexport type BaseThunkType<\n  A extends Action = Action,\n  R = Promise<void>\n> = ThunkAction<R, AppStateType, unknown, A>;\n\n//@ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n\n//@ts-ignore\nwindow.store = store;\n\nexport default store;\n","import React, { Suspense } from 'react';\n\nexport const withSuspense = (Component) => (props) => (\n  <Suspense fallback={<div>Loading...</div>}>\n    <Component {...props} />\n  </Suspense>\n);\n","import React from 'react';\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\nimport Music from './components/Music/Music';\nimport Navbar from './components/Navbar/Navbar';\nimport News from './components/News/News';\nimport Settings from './components/Settings/Settings';\n// import DialogsContainer from './components/Dialogs/DialogsContainer';\nimport UsersContainer from './components/Users/UsersContainer';\n// import ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Login from './components/Login/Login';\nimport { initializeApp } from './redux/app-reducer';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport Preloader from './components/common/preloader/Preloader';\nimport store from './redux/redux-store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { withSuspense } from './components/hoc/withSuspense';\n\nconst DialogsContainer = React.lazy(() =>\n  import('./components/Dialogs/DialogsContainer')\n);\n\nconst ProfileContainer = React.lazy(() =>\n  import('./components/Profile/ProfileContainer')\n);\n\nclass App extends React.Component {\n  catchAllUnhandledErrors = (reason, promise) => {\n    alert('Some error occured');\n  };\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\n      'unhandledrejection',\n      this.catchAllUnhandledErrors\n    );\n  }\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />;\n    }\n    return (\n      <div className='app-wrapper'>\n        <HeaderContainer />\n        <Navbar />\n        <div className='app-wrapper-content'>\n          <Switch>\n            <Route exact path='/' render={() => <Redirect to={'/profile'} />} />\n            <Route path='/dialogs' render={withSuspense(DialogsContainer)} />\n            <Route\n              path='/profile/:userId?'\n              render={withSuspense(ProfileContainer)}\n            />\n            <Route\n              path='/users'\n              render={() => <UsersContainer pageTitle={'Samurai'} />}\n            />\n            <Route path='/login' render={() => <Login />} />\n            <Route path='/news' render={() => <News />} />\n            <Route path='/music' render={() => <Music />} />\n            <Route path='/settings' render={() => <Settings />} />\n            <Route path='*' render={() => <div>404 NOT FOUND</div>} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ initialized: state.app.initialized });\n\nlet AppContainer = compose(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App);\n\nconst MainApp = (props) => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <AppContainer />\n      </Provider>\n    </BrowserRouter>\n  );\n};\n\nexport default MainApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MainApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__O_FW2\",\"error\":\"FormsControl_error__1yFXC\",\"formSummaryError\":\"FormsControl_formSummaryError__p0F6I\"};","import React, { FC } from 'react';\nimport preloader from './../../../assets/images/preloader.svg';\n\ntype PropsType = {\n  props?: null;\n};\n\nconst Preloader: FC<PropsType> = (props) => {\n  return (\n    <div style={{ backgroundColor: '#fff' }}>\n      <img src={preloader} alt='' />\n    </div>\n  );\n};\n\nexport default Preloader;\n","export type FieldValidatorType = (value: string) => string | undefined;\n\nexport const required: FieldValidatorType = (value) => {\n  if (value) return undefined;\n  return 'Field is required';\n};\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (\n  value\n) => {\n  if (value && value.length > maxLength)\n    return `Max length is ${maxLength} symbols`;\n  return undefined;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1RMar\",\"pageNumber\":\"Paginator_pageNumber__CQmJ1\",\"selectedPage\":\"Paginator_selectedPage__2T6A7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1DNs3\",\"loginBlock\":\"Header_loginBlock__3ez1P\"};","import { instance, APIResponseType } from './api';\r\nimport { ProfileType, PhotosType } from './../types/types';\r\n\r\ntype SavePhotoResponseDataType = {\r\n  photos: PhotosType;\r\n};\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return instance\r\n      .get<ProfileType>(`profile/${userId}`)\r\n      .then((response) => response.data);\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance\r\n      .get<string>(`profile/status/${userId}`)\r\n      .then((response) => response.data);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put<APIResponseType>(`profile/status`, { status })\r\n      .then((response) => response.data);\r\n  },\r\n  savePhoto(photoFile: File) {\r\n    const formData = new FormData();\r\n    formData.append('image', photoFile);\r\n    return instance\r\n      .put<APIResponseType<SavePhotoResponseDataType>>(\r\n        `profile/photo`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Connect-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      )\r\n      .then((response) => response.data);\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instance\r\n      .put<APIResponseType>(`profile`, profile)\r\n      .then((response) => response.data);\r\n  }\r\n};\r\n","import { PostType, ProfileType, PhotosType } from './../types/types';\nimport { profileAPI } from '../api/profile-api';\nimport { stopSubmit, FormAction } from 'redux-form';\nimport { InferActionsType, BaseThunkType } from './redux-store';\n\nexport type InitialStateType = typeof initialState;\nconst initialState = {\n  posts: [\n    { id: 1, message: 'Hi, how are you?', likes: 10 },\n    { id: 2, message: 'It`s my first post', likes: 15 }\n  ] as Array<PostType>,\n  profile: null as ProfileType | null,\n  status: '',\n  newPostText: ''\n};\n\nconst profileReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case 'SN/PROFILE/ADD_POST':\n      const newPost = { id: 5, message: action.newPostText, likes: 0 };\n      return { ...state, newPostText: '', posts: [...state.posts, newPost] };\n    case 'SN/PROFILE/SET_USER_PROFILE':\n      return { ...state, profile: action.profile };\n    case 'SN/PROFILE/SET_STATUS':\n      return { ...state, status: action.status };\n    case 'SN/PROFILE/DELETE_POST':\n      return {\n        ...state,\n        posts: state.posts.filter((p) => p.id !== action.postId)\n      };\n    case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n      return {\n        ...state,\n        profile: { ...state.profile, photos: action.photos } as ProfileType\n      };\n    default:\n      return state;\n  }\n};\n\ntype ActionsTypes = InferActionsType<typeof actions>;\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\n\nexport const actions = {\n  addPostActionCreator: (newPostText: string) =>\n    ({ type: 'SN/PROFILE/ADD_POST', newPostText } as const),\n  setUserProfile: (profile: ProfileType) =>\n    ({ type: 'SN/PROFILE/SET_USER_PROFILE', profile } as const),\n  setStatus: (status: string) =>\n    ({ type: 'SN/PROFILE/SET_STATUS', status } as const),\n  deletePost: (postId: number) =>\n    ({ type: 'SN/PROFILE/DELETE_POST', postId } as const),\n  savePhotoSuccess: (photos: PhotosType) =>\n    ({ type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos } as const)\n};\n\nexport const getUserProfile = (userId: number): ThunkType => async (\n  dispatch\n) => {\n  const data = await profileAPI.getProfile(userId);\n  dispatch(actions.setUserProfile(data));\n};\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n  const data = await profileAPI.getStatus(userId);\n  dispatch(actions.setStatus(data));\n};\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n  const data = await profileAPI.updateStatus(status);\n  if (data.resultCode === 0) dispatch(actions.setStatus(status));\n};\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n  const data = await profileAPI.savePhoto(file);\n  if (data.resultCode === 0)\n    dispatch(actions.savePhotoSuccess(data.data.photos));\n};\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (\n  dispatch,\n  getState\n) => {\n  const userId = getState().auth.userId;\n  const data = await profileAPI.saveProfile(profile);\n  if (data.resultCode === 0) {\n    if (userId !== null) {\n      dispatch(getUserProfile(userId));\n    } else {\n      throw new Error('userId cannot be null');\n    }\n  } else {\n    dispatch(stopSubmit('editProfile', { error: data.messages[0] }));\n    return Promise.reject(data.messages[0]);\n  }\n};\n\nexport default profileReducer;\n"],"sourceRoot":""}